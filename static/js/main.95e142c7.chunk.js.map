{"version":3,"sources":["di/DependencyContext.tsx","di/DependencyType.ts","utils/ArrayUtils.ts","components/product/ProductContext.tsx","di/DependencyHook.ts","utils/StringUtils.ts","components/shared/card/Card.tsx","components/shared/selector/Selector.tsx","components/product/ProductStock.tsx","components/product/ProductListItem.tsx","components/product/ProductList.tsx","components/shared/button/Button.tsx","components/inventory/Inventory.tsx","components/App.tsx","product/ProductService.ts","product/Product.ts","product/ProductPrice.ts","provider/mocky/MockyProductParser.ts","provider/mocky/MockyProductProvider.ts","di/Dependencies.ts","index.tsx"],"names":["DependencyContext","createContext","DependencyProvider","children","container","Provider","value","DependencyType","ProductService","Symbol","for","ArrayUtils","map","Array","from","values","set","DEFAULT_CONTEXT","products","selectedProducts","Set","onProductSelected","noop","onProductsRemoved","ProductsContext","ProductsProvider","productService","identifier","useContext","Error","get","useInjection","useState","setProducts","setSelectedProducts","useEffect","isLoadingProducts","getProducts","then","fetchedProducts","id","has","withoutUnselected","setToArray","filter","productId","removeUnselected","prev","add","addSelected","removeProducts","useProducts","StringUtils","amount","toLocaleString","style","currency","Card","image","imageBadge","className","backgroundImage","Selector","onSelected","checked","setChecked","onChange","useCallback","htmlFor","type","ProductStock","product","available","quantity","lowOnStock","stockQuantity","ProductListItem","name","price","thumbnail","promotionBadge","currentPrice","current","oldPrice","old","toString","toGBP","isDiscounted","ProductList","Button","onClick","Inventory","size","App","productProvider","_products","_productProvider","this","Map","a","fetchProducts","forEach","mapValuesToArray","productIds","delete","Product","_id","_name","_price","_available","_quantity","_lowOnStock","_thumbnail","_promotionBadge","ProductPrice","_current","_old","MockyProductParser","priceWas","imageUrl","isProductAvailable","isLowOnStock","MockyProductProvider","_mockyProductParser","axios","results","data","status","parse","dependenciesContainer","Container","bind","toDynamicValue","inSingletonScope","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mWAGaA,EAAoBC,wBAAgC,MAMpDC,EAAgD,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,SAAUC,EAAgB,EAAhBA,UACtE,OAAO,cAACJ,EAAkBK,SAAnB,CAA4BC,MAAOF,EAAnC,SAA+CD,KCV1D,IAIeI,EAJQ,CACnBC,eAAgBC,OAAOC,IAAI,mB,cCDVC,E,qGACjB,SAAgCC,GAC5B,OAAOC,MAAMC,KAAKF,EAAIG,Y,wBAG1B,SAAqBC,GACjB,OAAOH,MAAMC,KAAKE,O,KCcpBC,EAAwC,CAC1CC,SAAU,GACVC,iBAAkB,IAAIC,IACtBC,kBAAmBC,OACnBC,kBAAmBD,QAGVE,EAAkBvB,wBAAoCgB,GAEtDQ,EAA6B,SAAC,GAAkB,IAAhBtB,EAAe,EAAfA,SACnCuB,EC1BK,SAAyBC,GACpC,IAAMvB,EAAYwB,qBAAW5B,GAC7B,GAAkB,OAAdI,EACA,MAAM,IAAIyB,MAAJ,8CAEV,OAAOzB,EAAU0B,IAAOH,GDqBDI,CAA6BxB,EAAeC,gBADX,EAExBwB,mBAAoB,IAFI,mBAEjDd,EAFiD,KAEvCe,EAFuC,OAGRD,mBAA2B,IAAIZ,KAHvB,mBAGjDD,EAHiD,KAG/Be,EAH+B,KAKxDC,qBAAU,WACN,IAAIC,GAAoB,EAMxB,OALAV,EAAeW,cAAcC,MAAK,SAAAC,GAC1BH,GACAH,EAAYM,MAGb,WACHH,GAAoB,KAEzB,IAEH,IAsBMrB,EAAS,CACXG,WACAC,mBACAE,kBAhBsB,SAACmB,GACnBrB,EAAiBsB,IAAID,GANJ,SAACA,GACtB,IAAME,EAAoB/B,EAAWgC,WAAWxB,GAAkByB,QAAO,SAAAC,GAAS,OAAIA,IAAcL,KACpGN,EAAoB,IAAId,IAAIsB,IAKxBI,CAAiBN,GAXL,SAACA,GACjBN,GAAoB,SAAAa,GAAI,OAAI,IAAI3B,IAAI2B,EAAKC,IAAIR,OAa7CS,CAAYT,IAYZjB,kBATsB,WACtBU,EAAYP,EAAewB,eAAevC,EAAWgC,WAAWxB,KAChEe,EAAoB,IAAId,OAU5B,OAAO,cAACI,EAAgBnB,SAAjB,CAA0BC,MAAOS,EAAjC,SAA0CZ,KAG9C,SAASgD,IACZ,OAAOvB,qBAAWJ,G,IE/ED4B,E,0FACjB,SAAaC,GACT,OAAOA,EAAOC,eAAe,QAAS,CAClCC,MAAO,WACPC,SAAU,Y,KCiBPC,G,MAXmB,SAAC,GAA8D,IAA5DC,EAA2D,EAA3DA,MAAOC,EAAoD,EAApDA,WAAYC,EAAwC,EAAxCA,UAAWzD,EAA6B,EAA7BA,SAC/D,OACI,sBAAKyD,UAAS,eAAUA,GAAxB,UACI,qBAAKA,UAAU,cAAcL,MAAO,CAAEM,gBAAgB,OAAD,OAASH,EAAT,MAArD,SACKC,GAAc,sBAAMC,UAAU,mBAAhB,SAAoCD,MAEvD,qBAAKC,UAAU,gBAAf,SAAgCzD,SCW7B2D,G,MAhB2B,SAAC,GAAsD,IAApDtB,EAAmD,EAAnDA,GAAIuB,EAA+C,EAA/CA,WAA+C,IAAnCH,iBAAmC,MAAvB,GAAuB,IAC9D5B,oBAAkB,GAD4C,mBACrFgC,EADqF,KAC5EC,EAD4E,KAGtFC,EAAWC,uBAAY,WACzBJ,GAAYC,GACZC,GAAYD,KACb,CAACA,IAEJ,OACI,wBAAOJ,UAAS,mBAAcA,GAAaQ,QAAS5B,EAApD,UACI,uBAAOoB,UAAU,kBAAkBpB,GAAIA,EAAI6B,KAAK,WAAWL,QAASA,EAASE,SAAUA,IACvF,sBAAMN,UAAU,6BCQbU,G,YArBmC,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,QACzCC,EAAoCD,EAApCC,UAAWC,EAAyBF,EAAzBE,SAAUC,EAAeH,EAAfG,WAE7B,IAAKF,GAA0B,IAAbC,EACd,OAAO,sBAAMb,UAAU,yBAAhB,0BAGX,IAAMe,EAAgB,sBAAMf,UAAU,8BAAhB,mBAAkDa,EAAlD,eAEtB,OAAIC,EAEI,qCACKC,EACD,sBAAMf,UAAU,yBAAhB,6BAKLe,ICWIC,EAxByC,SAAC,GAA+B,IAA7BL,EAA4B,EAA5BA,QAC/ClD,EAAsB8B,IAAtB9B,kBACAmB,EAA+C+B,EAA/C/B,GAAIqC,EAA2CN,EAA3CM,KAAMC,EAAqCP,EAArCO,MAAOC,EAA8BR,EAA9BQ,UAAWC,EAAmBT,EAAnBS,eACnBC,EAAgCH,EAAzCI,QAA4BC,EAAaL,EAAlBM,IAE/B,OACI,eAAC,EAAD,CAAMxB,UAAU,kBAAkBF,MAAOqB,EAAWpB,WAAYqB,EAAhE,UACI,cAAC,EAAD,CACIpB,UAAU,4BACVpB,GAAIA,EAAG6C,WACPtB,WAAY,kBAAM1C,EAAkBmB,MAExC,oBAAIoB,UAAU,wBAAd,SAAuCiB,IACvC,qBAAIjB,UAAU,yBAAd,UACI,sBAAMA,UAAU,gCAAhB,SAAiDR,EAAYkC,MAAML,KAClEH,EAAMS,gBACH,sBAAM3B,UAAU,4BAAhB,SAA6CR,EAAYkC,MAAMH,QAGvE,cAAC,EAAD,CAAcZ,QAASA,QCfpBiB,G,MAZe,WAAqB,IACvCtE,EAAaiC,IAAbjC,SAER,OACI,qBAAK0C,UAAU,cAAf,SACK1C,EAASN,KAAI,SAAA2D,GAAO,OACjB,cAAC,EAAD,CAAkCA,QAASA,GAArBA,EAAQ/B,WCO/BiD,G,MARuB,SAAC,GAAqC,IAAnCZ,EAAkC,EAAlCA,KAAMa,EAA4B,EAA5BA,QAC3C,OACI,wBAAQ9B,UAAU,SAASS,KAAK,SAASqB,QAASA,EAAlD,SACKb,MCIEc,G,MAXa,WAAqB,IAAD,EACIxC,IAAxChC,EADoC,EACpCA,iBAAkBI,EADkB,EAClBA,kBAE1B,OACI,sBAAKqC,UAAU,YAAf,UACI,cAAC,EAAD,CAAQiB,KAAI,iBAAY1D,EAAiByE,KAA7B,sBAAuDF,QAASnE,IAC5E,cAAC,EAAD,SCCGsE,G,MARO,WAClB,OACI,cAAC,EAAD,UACI,cAAC,EAAD,Q,iCCHSrF,E,WAKjB,WAAYsF,GAAoC,yBAJ/BC,eAI8B,OAF9BC,sBAE8B,EAC3CC,KAAKD,iBAAmBF,EACxBG,KAAKF,UAAY,IAAIG,I,sFAGzB,iCAAAC,EAAA,sEAC2BF,KAAKD,iBAAiBI,gBADjD,qBAEaC,SAAQ,SAAA9B,GACb,EAAKwB,UAAU/E,IAAIuD,EAAQ/B,GAAI+B,MAHvC,kBAKW5D,EAAW2F,iBAAiBL,KAAKF,YAL5C,gD,kFAQA,SAAeQ,GAAkC,IAAD,OAI5C,OAHAA,EAAWF,SAAQ,SAAAxD,GACf,EAAKkD,UAAUS,OAAO3D,MAEnBlC,EAAW2F,iBAAiBL,KAAKF,e,sBCf3BU,E,WAiBjB,cAA2G,IAA7FjE,EAA4F,EAA5FA,GAAIqC,EAAwF,EAAxFA,KAAMC,EAAkF,EAAlFA,MAAON,EAA2E,EAA3EA,UAAWC,EAAgE,EAAhEA,SAAUC,EAAsD,EAAtDA,WAAYM,EAA0C,EAA1CA,eAAgBD,EAA0B,EAA1BA,UAA0B,yBAhBzF2B,SAgByF,OAdzFC,WAcyF,OAZzFC,YAYyF,OAVzFC,gBAUyF,OARzFC,eAQyF,OANzFC,iBAMyF,OAJzFC,gBAIyF,OAFzFC,qBAEyF,EACtGhB,KAAKS,IAAMlE,EACXyD,KAAKU,MAAQ9B,EACboB,KAAKW,OAAS9B,EACdmB,KAAKY,WAAarC,EAClByB,KAAKa,UAAYrC,EACjBwB,KAAKc,YAAcrC,EACnBuB,KAAKgB,gBAAkBjC,GAAkB,GACzCiB,KAAKe,WAAajC,E,oCAGtB,WACI,OAAOkB,KAAKS,M,gBAGhB,WACI,OAAOT,KAAKU,Q,iBAGhB,WACI,OAAOV,KAAKW,S,qBAGhB,WACI,OAAOX,KAAKY,a,oBAGhB,WACI,OAAOZ,KAAKa,Y,sBAGhB,WACI,OAAOb,KAAKc,c,0BAGhB,WACI,OAAOd,KAAKgB,kB,qBAGhB,WACI,OAAOhB,KAAKe,e,KCjECE,E,WAKjB,cAAiD,IAAnChC,EAAkC,EAAlCA,QAASE,EAAyB,EAAzBA,IAAyB,yBAJ/B+B,cAI+B,OAF/BC,UAE+B,EAC5CnB,KAAKkB,SAAWjC,EAChBe,KAAKmB,KAAOhC,GAAOF,E,yCAGvB,WACI,OAAOe,KAAKkB,W,eAGhB,WACI,OAAOlB,KAAKmB,O,0BAGhB,WACI,OAAOnB,KAAKkB,SAAWlB,KAAKmB,S,KCnBfC,E,qFACjB,SAAMnG,GAAsC,IAAD,OACvC,OAAOA,EAASN,KAAI,SAAA2D,GAAY,IAEb/B,EASX+B,EATA1B,UACAgC,EAQAN,EARAM,KACOK,EAOPX,EAPAO,MACUM,EAMVb,EANA+C,SACA9C,EAKAD,EALAC,UACAC,EAIAF,EAJAE,SACAC,EAGAH,EAHAG,WACAM,EAEAT,EAFAS,eACUD,EACVR,EADAgD,SAGJ,OAAO,IAAId,EAAQ,CACfjE,KACAqC,OACAC,MAAO,IAAIoC,EAAa,CAAEhC,UAASE,QACnCZ,UAAW,EAAKgD,mBAAmBhD,GACnCC,WACAC,WAAY,EAAK+C,aAAa/C,GAC9BM,iBACAD,mB,gCAKZ,SAA2BP,GACvB,MAAqB,SAAdA,I,0BAGX,SAAqBE,GACjB,MAAsB,SAAfA,M,KC7BMgD,E,WAGjB,aAAe,yBAFEC,yBAEH,EACV1B,KAAK0B,oBAAsB,IAAIN,E,wFAGnC,4BAAAlB,EAAA,sEAC0ByB,IAAM9F,IAVJ,gEAS5B,WACU+F,EADV,QAEiBC,MAA2B,MAAnBD,EAAQE,OAFjC,yCAGe,IAHf,gCAKW9B,KAAK0B,oBAAoBK,MAAMH,EAAQC,OALlD,gD,6DCXEG,EAAwB,IAAIC,YAElCD,EACKE,KAAqB5H,EAAeC,gBACpC4H,gBAAe,WACZ,OAAO,IAAI5H,EAAe,IAAIkH,MAEjCW,mBAEUJ,Q,MCLfK,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,CAAoBpI,UAAW6H,EAA/B,SACI,cAAC,EAAD,QAGRQ,SAASC,eAAe,W","file":"static/js/main.95e142c7.chunk.js","sourcesContent":["import React, { createContext } from 'react';\r\nimport { Container } from 'inversify';\r\n\r\nexport const DependencyContext = createContext<Container | null>(null);\r\n\r\nexport interface DependencyProps {\r\n    container: Container;\r\n}\r\n\r\nexport const DependencyProvider: React.FC<DependencyProps> = ({ children, container }) => {\r\n    return <DependencyContext.Provider value={container}>{children}</DependencyContext.Provider>;\r\n};\r\n","const DependencyType = {\r\n    ProductService: Symbol.for('ProductService'),\r\n};\r\n\r\nexport default DependencyType;\r\n","export default class ArrayUtils {\r\n    static mapValuesToArray<T1, T2>(map: Map<T1, T2>): T2[] {\r\n        return Array.from(map.values());\r\n    }\r\n\r\n    static setToArray<T>(set: Set<T>): T[] {\r\n        return Array.from(set);\r\n    }\r\n}\r\n","import React, { createContext, useContext, useEffect, useState } from 'react';\r\nimport { noop } from 'lodash';\r\nimport useInjection from '../../di/DependencyHook';\r\nimport DependencyType from '../../di/DependencyType';\r\nimport Product from '../../product/Product';\r\nimport ProductService from '../../product/ProductService';\r\nimport ArrayUtils from '../../utils/ArrayUtils';\r\n\r\nexport type SelectedProducts = Set<number>;\r\nexport type OnProductSelected = (id: number) => void;\r\nexport type OnProductsRemoved = () => void;\r\nexport type OnClearSelected = () => void;\r\n\r\nexport interface ProductsContextProps {\r\n    products: Product[];\r\n    selectedProducts: SelectedProducts;\r\n    onProductSelected: OnProductSelected;\r\n    onProductsRemoved: OnProductsRemoved;\r\n}\r\n\r\nconst DEFAULT_CONTEXT: ProductsContextProps = {\r\n    products: [],\r\n    selectedProducts: new Set(),\r\n    onProductSelected: noop,\r\n    onProductsRemoved: noop,\r\n};\r\n\r\nexport const ProductsContext = createContext<ProductsContextProps>(DEFAULT_CONTEXT);\r\n\r\nexport const ProductsProvider: React.FC = ({ children }) => {\r\n    const productService = useInjection<ProductService>(DependencyType.ProductService);\r\n    const [products, setProducts] = useState<Product[]>([]);\r\n    const [selectedProducts, setSelectedProducts] = useState<SelectedProducts>(new Set());\r\n\r\n    useEffect(() => {\r\n        let isLoadingProducts = true;\r\n        productService.getProducts().then(fetchedProducts => {\r\n            if (isLoadingProducts) {\r\n                setProducts(fetchedProducts);\r\n            }\r\n        });\r\n        return () => {\r\n            isLoadingProducts = false;\r\n        };\r\n    }, []);\r\n\r\n    const addSelected = (id: number) => {\r\n        setSelectedProducts(prev => new Set(prev.add(id)));\r\n    };\r\n\r\n    const removeUnselected = (id: number) => {\r\n        const withoutUnselected = ArrayUtils.setToArray(selectedProducts).filter(productId => productId !== id);\r\n        setSelectedProducts(new Set(withoutUnselected));\r\n    };\r\n\r\n    const onProductSelected = (id: number) => {\r\n        if (selectedProducts.has(id)) {\r\n            removeUnselected(id);\r\n            return;\r\n        }\r\n        addSelected(id);\r\n    };\r\n\r\n    const onProductsRemoved = () => {\r\n        setProducts(productService.removeProducts(ArrayUtils.setToArray(selectedProducts)));\r\n        setSelectedProducts(new Set());\r\n    };\r\n\r\n    const values = {\r\n        products,\r\n        selectedProducts,\r\n        onProductSelected,\r\n        onProductsRemoved,\r\n    };\r\n\r\n    return <ProductsContext.Provider value={values}>{children}</ProductsContext.Provider>;\r\n};\r\n\r\nexport function useProducts(): ProductsContextProps {\r\n    return useContext(ProductsContext);\r\n}\r\n","import { useContext } from 'react';\r\nimport { interfaces } from 'inversify';\r\nimport { DependencyContext } from './DependencyContext';\r\n\r\nexport default function useInjection<T>(identifier: interfaces.ServiceIdentifier<T>) {\r\n    const container = useContext(DependencyContext);\r\n    if (container === null) {\r\n        throw new Error(`The dependency container should be defined`);\r\n    }\r\n    return container.get<T>(identifier);\r\n}\r\n","export default class StringUtils {\r\n    static toGBP(amount: number): string {\r\n        return amount.toLocaleString('en-UK', {\r\n            style: 'currency',\r\n            currency: 'GBP',\r\n        });\r\n    }\r\n}\r\n","import React, { ReactElement } from 'react';\r\n\r\nimport './Card.scss';\r\n\r\nexport interface CardProps {\r\n    image: string;\r\n    imageBadge?: string;\r\n    className: string;\r\n}\r\n\r\nconst Card: React.FC<CardProps> = ({ image, imageBadge, className, children }): ReactElement => {\r\n    return (\r\n        <div className={`Card ${className}`}>\r\n            <div className=\"Card__image\" style={{ backgroundImage: `url(${image})` }}>\r\n                {imageBadge && <span className=\"Card__imageBadge\">{imageBadge}</span>}\r\n            </div>\r\n            <div className=\"Card__content\">{children}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Card;\r\n","import React, { ReactElement, useCallback, useState } from 'react';\r\n\r\nimport './Selector.scss';\r\n\r\nexport type OnChecked = (checked: boolean) => void;\r\nexport interface SelectorProps {\r\n    id: string;\r\n    onSelected: OnChecked;\r\n    className?: string;\r\n}\r\n\r\nconst Selector: React.FC<SelectorProps> = ({ id, onSelected, className = '' }): ReactElement => {\r\n    const [checked, setChecked] = useState<boolean>(false);\r\n\r\n    const onChange = useCallback(() => {\r\n        onSelected(!checked);\r\n        setChecked(!checked);\r\n    }, [checked]);\r\n\r\n    return (\r\n        <label className={`Selector ${className}`} htmlFor={id}>\r\n            <input className=\"Selector__input\" id={id} type=\"checkbox\" checked={checked} onChange={onChange} />\r\n            <span className=\"Selector__checkmark\" />\r\n        </label>\r\n    );\r\n}\r\n\r\nexport default Selector;\r\n","import React, { ReactElement } from 'react';\r\nimport Product from '../../product/Product';\r\n\r\nimport './ProductStock.scss';\r\n\r\nexport interface ProductStockProps {\r\n    product: Product;\r\n}\r\n\r\nconst ProductStock: React.FC<ProductStockProps> = ({ product }): ReactElement => {\r\n    const { available, quantity, lowOnStock } = product;\r\n\r\n    if (!available || quantity === 0) {\r\n        return <span className=\"ProductStock__stockOut\">Out of stock</span>;\r\n    }\r\n\r\n    const stockQuantity = <span className=\"ProductStock__stockQuantity\">{`${quantity} in stock`}</span>;\r\n\r\n    if (lowOnStock) {\r\n        return (\r\n            <>\r\n                {stockQuantity}\r\n                <span className=\"ProductStock__stockLow\">Low on stock</span>\r\n            </>\r\n        );\r\n    }\r\n\r\n    return stockQuantity;\r\n};\r\n\r\nexport default ProductStock;\r\n","import React, { ReactElement, useCallback, useMemo } from 'react';\r\nimport Product from '../../product/Product';\r\nimport StringUtils from '../../utils/StringUtils';\r\nimport Card from '../shared/card/Card';\r\nimport Selector from '../shared/selector/Selector';\r\nimport { useProducts } from './ProductContext';\r\n\r\nimport './ProductListItem.scss';\r\nimport ProductStock from './ProductStock';\r\n\r\nexport interface ProductListItemProps {\r\n    product: Product;\r\n}\r\n\r\nconst ProductListItem: React.FC<ProductListItemProps> = ({ product }): ReactElement => {\r\n    const { onProductSelected } = useProducts();\r\n    const { id, name, price, thumbnail, promotionBadge } = product;\r\n    const { current: currentPrice, old: oldPrice } = price;\r\n\r\n    return (\r\n        <Card className=\"ProductListItem\" image={thumbnail} imageBadge={promotionBadge}>\r\n            <Selector\r\n                className=\"ProductListItem__selector\"\r\n                id={id.toString()}\r\n                onSelected={() => onProductSelected(id)}\r\n            />\r\n            <h3 className=\"ProductListItem__name\">{name}</h3>\r\n            <h4 className=\"ProductListItem__price\">\r\n                <span className=\"ProductListItem__currentPrice\">{StringUtils.toGBP(currentPrice)}</span>\r\n                {price.isDiscounted() && (\r\n                    <span className=\"ProductListItem__oldPrice\">{StringUtils.toGBP(oldPrice)}</span>\r\n                )}\r\n            </h4>\r\n            <ProductStock product={product} />\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default ProductListItem;\r\n","import React, { ReactElement } from 'react';\r\nimport ProductListItem from './ProductListItem';\r\nimport { useProducts } from './ProductContext';\r\n\r\nimport './ProductList.scss';\r\n\r\nconst ProductList: React.FC = (): ReactElement => {\r\n    const { products } = useProducts();\r\n\r\n    return (\r\n        <div className=\"ProductList\">\r\n            {products.map(product => (\r\n                <ProductListItem key={product.id} product={product} />\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProductList;\r\n","import React, { ReactElement } from 'react';\r\n\r\nimport './Button.scss';\r\n\r\nexport type OnButtonClick = () => void;\r\n\r\nexport interface ButtonProps {\r\n    name: string;\r\n    onClick: OnButtonClick;\r\n}\r\n\r\nconst Button: React.FC<ButtonProps> = ({ name, onClick }): ReactElement => {\r\n    return (\r\n        <button className=\"Button\" type=\"button\" onClick={onClick}>\r\n            {name}\r\n        </button>\r\n    );\r\n};\r\n\r\nexport default Button;\r\n","import React, { ReactElement } from 'react';\r\nimport { useProducts } from '../product/ProductContext';\r\nimport ProductList from '../product/ProductList';\r\nimport Button from '../shared/button/Button';\r\n\r\nimport './Inventory.scss';\r\n\r\nconst Inventory: React.FC = (): ReactElement => {\r\n    const { selectedProducts, onProductsRemoved } = useProducts();\r\n\r\n    return (\r\n        <div className=\"Inventory\">\r\n            <Button name={`Remove ${selectedProducts.size} selected products`} onClick={onProductsRemoved} />\r\n            <ProductList />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Inventory;\r\n","import React, { ReactElement } from 'react';\nimport Inventory from './inventory/Inventory';\nimport { ProductsProvider } from './product/ProductContext';\n\nimport './App.scss';\n\nconst App: React.FC = (): ReactElement => {\n    return (\n        <ProductsProvider>\n            <Inventory />\n        </ProductsProvider>\n    );\n};\n\nexport default App;\n","import { ProductsProvider } from '../provider/ProductProvider';\r\nimport ArrayUtils from '../utils/ArrayUtils';\r\nimport Product from './Product';\r\n\r\nexport type Products = Map<number, Product>;\r\n\r\nexport default class ProductService {\r\n    private readonly _products: Products;\r\n\r\n    private readonly _productProvider: ProductsProvider;\r\n\r\n    constructor(productProvider: ProductsProvider) {\r\n        this._productProvider = productProvider;\r\n        this._products = new Map();\r\n    }\r\n\r\n    async getProducts(): Promise<Product[]> {\r\n        const products = await this._productProvider.fetchProducts();\r\n        products.forEach(product => {\r\n            this._products.set(product.id, product);\r\n        });\r\n        return ArrayUtils.mapValuesToArray(this._products);\r\n    }\r\n\r\n    removeProducts(productIds: number[]): Product[] {\r\n        productIds.forEach(productId => {\r\n            this._products.delete(productId);\r\n        });\r\n        return ArrayUtils.mapValuesToArray(this._products);\r\n    }\r\n}\r\n","import ProductPrice from './ProductPrice';\r\n\r\nexport interface ProductData {\r\n    id: number;\r\n    name: string;\r\n    price: ProductPrice;\r\n    available: boolean;\r\n    quantity: number;\r\n    lowOnStock: boolean;\r\n    promotionBadge?: string;\r\n    thumbnail: string;\r\n}\r\n\r\nexport default class Product {\r\n    private readonly _id: number;\r\n\r\n    private readonly _name: string;\r\n\r\n    private readonly _price: ProductPrice;\r\n\r\n    private readonly _available: boolean;\r\n\r\n    private readonly _quantity: number;\r\n\r\n    private readonly _lowOnStock: boolean;\r\n\r\n    private readonly _thumbnail: string;\r\n\r\n    private readonly _promotionBadge?: string;\r\n\r\n    constructor({ id, name, price, available, quantity, lowOnStock, promotionBadge, thumbnail }: ProductData) {\r\n        this._id = id;\r\n        this._name = name;\r\n        this._price = price;\r\n        this._available = available;\r\n        this._quantity = quantity;\r\n        this._lowOnStock = lowOnStock;\r\n        this._promotionBadge = promotionBadge || '';\r\n        this._thumbnail = thumbnail;\r\n    }\r\n\r\n    get id() {\r\n        return this._id;\r\n    }\r\n\r\n    get name() {\r\n        return this._name;\r\n    }\r\n\r\n    get price() {\r\n        return this._price;\r\n    }\r\n\r\n    get available() {\r\n        return this._available;\r\n    }\r\n\r\n    get quantity() {\r\n        return this._quantity;\r\n    }\r\n\r\n    get lowOnStock() {\r\n        return this._lowOnStock;\r\n    }\r\n\r\n    get promotionBadge() {\r\n        return this._promotionBadge;\r\n    }\r\n\r\n    get thumbnail() {\r\n        return this._thumbnail;\r\n    }\r\n}\r\n","export interface ProductPriceData {\r\n    current: number;\r\n    old?: number;\r\n}\r\n\r\nexport default class ProductPrice {\r\n    private readonly _current: number;\r\n\r\n    private readonly _old: number;\r\n\r\n    constructor({ current, old }: ProductPriceData) {\r\n        this._current = current;\r\n        this._old = old || current;\r\n    }\r\n\r\n    get current() {\r\n        return this._current;\r\n    }\r\n\r\n    get old() {\r\n        return this._old;\r\n    }\r\n\r\n    isDiscounted(): boolean {\r\n        return this._current < this._old;\r\n    }\r\n}\r\n","import Product from '../../product/Product';\r\nimport ProductPrice from '../../product/ProductPrice';\r\nimport { ProductsParser } from '../ProductParser';\r\nimport { MockyProduct } from './MockyTypes';\r\n\r\nexport default class MockyProductParser implements ProductsParser<MockyProduct> {\r\n    parse(products: MockyProduct[]): Product[] {\r\n        return products.map(product => {\r\n            const {\r\n                productId: id,\r\n                name,\r\n                price: current,\r\n                priceWas: old,\r\n                available,\r\n                quantity,\r\n                lowOnStock,\r\n                promotionBadge,\r\n                imageUrl: thumbnail,\r\n            } = product;\r\n\r\n            return new Product({\r\n                id,\r\n                name,\r\n                price: new ProductPrice({ current, old }),\r\n                available: this.isProductAvailable(available),\r\n                quantity,\r\n                lowOnStock: this.isLowOnStock(lowOnStock),\r\n                promotionBadge,\r\n                thumbnail,\r\n            });\r\n        });\r\n    }\r\n\r\n    private isProductAvailable(available: string): boolean {\r\n        return available === 'TRUE';\r\n    }\r\n\r\n    private isLowOnStock(lowOnStock: string): boolean {\r\n        return lowOnStock === 'TRUE';\r\n    }\r\n}\r\n","import axios from 'axios';\r\nimport Product from '../../product/Product';\r\nimport { ProductsParser } from '../ProductParser';\r\nimport { ProductsProvider } from '../ProductProvider';\r\nimport MockyProductParser from './MockyProductParser';\r\nimport { MockyProduct } from './MockyTypes';\r\n\r\nconst MOCKY_PRODUCTS_ENDPOINT = 'https://run.mocky.io/v3/fca7ef93-8d86-4574-9a4a-3900d91a283e';\r\n\r\nexport default class MockyProductProvider implements ProductsProvider {\r\n    private readonly _mockyProductParser: ProductsParser<MockyProduct>;\r\n\r\n    constructor() {\r\n        this._mockyProductParser = new MockyProductParser();\r\n    }\r\n\r\n    async fetchProducts(): Promise<Product[]> {\r\n        const results = await axios.get(MOCKY_PRODUCTS_ENDPOINT);\r\n        if (!results.data || results.status !== 200) {\r\n            return [];\r\n        }\r\n        return this._mockyProductParser.parse(results.data);\r\n    }\r\n}\r\n","import { Container } from 'inversify';\r\nimport ProductService from '../product/ProductService';\r\nimport MockyProductProvider from '../provider/mocky/MockyProductProvider';\r\nimport DependencyType from './DependencyType';\r\n\r\nconst dependenciesContainer = new Container();\r\n\r\ndependenciesContainer\r\n    .bind<ProductService>(DependencyType.ProductService)\r\n    .toDynamicValue(() => {\r\n        return new ProductService(new MockyProductProvider());\r\n    })\r\n    .inSingletonScope();\r\n\r\nexport default dependenciesContainer;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'reflect-metadata';\nimport App from './components/App';\nimport dependenciesContainer from './di/Dependencies';\nimport { DependencyProvider } from './di/DependencyContext';\n\nimport './index.scss';\n\nReactDOM.render(\n    <React.StrictMode>\n        <DependencyProvider container={dependenciesContainer}>\n            <App />\n        </DependencyProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}